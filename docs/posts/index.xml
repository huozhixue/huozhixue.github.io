<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 个人博客</title>
        <link>https://huozhixue.github.io/posts/</link>
        <description>所有文章 | 个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 01 Jan 2024 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://huozhixue.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>算法模板</title>
    <link>https://huozhixue.github.io/template/</link>
    <pubDate>Mon, 01 Jan 2024 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template/</guid>
    <description><![CDATA[1 字符串 字符串匹配：kmp、mancher、z函数、滚动哈希 字典树 后缀数组 AC自动机 2 位运算 位运算 3 链表 链表 4 栈 计算器 5 块 块状数组 6 贪心 贪心]]></description>
</item><item>
    <title>dp模板</title>
    <link>https://huozhixue.github.io/template-dp/</link>
    <pubDate>Thu, 01 Jun 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-dp/</guid>
    <description><![CDATA[数位dp 1 2 3 4 5 6 7 8 9 10 11 @cache def dfs(i,st,bd): if i==len(s): return st res = 0 cur = int(s[i]) up = cur if bd else 9 for x in range(up+1): res += dfs(i+1,st+(x==1),bd and x==cur) return res s = str(n)]]></description>
</item><item>
    <title>图模板：网络流</title>
    <link>https://huozhixue.github.io/template-graph_flow/</link>
    <pubDate>Fri, 05 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_flow/</guid>
    <description><![CDATA[1 最大流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Dinic: def __init__(self,): self.g = defaultdict(list) # g 是图中每个 u 对应的 v 列表 self.h =]]></description>
</item><item>
    <title>图模板：图匹配</title>
    <link>https://huozhixue.github.io/template-graph_match/</link>
    <pubDate>Thu, 04 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_match/</guid>
    <description><![CDATA[二分图 最大匹配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def hgr(g): # g 是二分图中每个 x 对应的 y 列表 def find(x): for y in g[x]: if y not in vis: vis.add(y) if y not in d or find(d[y]): d[y]=x return True return False res,vis,d = 0,set(),{} for x in g:]]></description>
</item><item>
    <title>图模板：连通性</title>
    <link>https://huozhixue.github.io/template-graph_tarjan/</link>
    <pubDate>Wed, 03 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_tarjan/</guid>
    <description><![CDATA[割点 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def tarjan(u,root): nonlocal t dfn[u]=low[u]=t=t+1 s = 0 for v in g[u]: if not dfn[v]: tarjan(v,0) low[u] = min(low[u],low[v]) s += low[v]&gt;=dfn[u] else: low[u] = min(low[u],dfn[v]) cut[u] = s&gt;root dfn,low,t = [0]*n,[0]*n,0 cut = [0]*n tarjan(0,1) 桥 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def tarjan(u,fa):]]></description>
</item><item>
    <title>图模板：拓扑排序</title>
    <link>https://huozhixue.github.io/template-graph_topo/</link>
    <pubDate>Tue, 02 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_topo/</guid>
    <description><![CDATA[博弈反推 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Q = deque(res) # res[u]：终态 u 的胜负结果 while Q: u = Q.popleft() if u==start: # start：初始态 return res[u] for v in nxt[u]: if v in res: continue if v[-1]==res[u]: res[v]]]></description>
</item><item>
    <title>图模板：最短路</title>
    <link>https://huozhixue.github.io/template-graph_shortest/</link>
    <pubDate>Mon, 01 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_shortest/</guid>
    <description><![CDATA[1 dijkstra 1 2 3 4 5 6 7 8 9 10 11 12 13 def dij(g,s): pq,d = [(0,s)], [inf]*n d[s] = 0 while pq: w,u = heappop(pq) if w&gt;d[u]: continue for v,w2 in g[u]: nw = w+w2 if nw&lt;d[v]: d[v] = nw heappush(pq, (nw,v)) return d 1 2 3 4 5 6 7 8 9 def dij(g,s): Q, d = set(range(n)), [inf]*n d[s] = 0 while Q: u]]></description>
</item><item>
    <title>树模板：珂朵莉树</title>
    <link>https://huozhixue.github.io/template-tree_odt/</link>
    <pubDate>Thu, 06 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_odt/</guid>
    <description><![CDATA[珂朵莉树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class ODT: def __init__(self,): from sortedcontainers import SortedList self.sl = SortedList() def update(self,l,r,x): s, e = l, r pos = self.sl.bisect_right((r+2,))-1 while pos&gt;=0 and self.sl[pos][1]&gt;=l-1: a, b, y = self.sl.pop(pos) if y==x: s, e = min(s, a), max(e, b) else: if b&gt;r: self.sl.add((r+1,b,y)) if a&lt;l: self.sl.add((a,l-1,y)) pos]]></description>
</item><item>
    <title>树模板：线段树</title>
    <link>https://huozhixue.github.io/template-tree_seg/</link>
    <pubDate>Wed, 05 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_seg/</guid>
    <description><![CDATA[递归式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def build(o,l,r): if l==r: t[o] = A[l] return m = (l+r)//2 build(o*2,l,m) build(o*2+1,m+1,r) t[o] = max(t[o*2],t[o*2+1]) def do(o,x): # 收到更新信息 x]]></description>
</item><item>
    <title>树模板：树状数组</title>
    <link>https://huozhixue.github.io/template-tree_bit/</link>
    <pubDate>Tue, 04 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_bit/</guid>
    <description><![CDATA[1 区间和 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def add(i,x): # 更新 t[i] 加上 x while i&lt;ma: t[i] += x i += i&amp;-i def get(i): # t[:i+1] 的和 res = 0 while i: res += t[i] i &amp;= i-1 return res ma = len(nums)+1 t = defaultdict(int) 2 区间最大值（只变大]]></description>
</item></channel>
</rss>
