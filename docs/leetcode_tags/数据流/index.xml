<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>数据流 - 力扣标签 - 个人博客</title>
        <link>https://huozhixue.github.io/leetcode_tags/%E6%95%B0%E6%8D%AE%E6%B5%81/</link>
        <description>数据流 - 力扣标签 - 个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 11 Apr 2021 11:00:00 &#43;0800</lastBuildDate><atom:link href="https://huozhixue.github.io/leetcode_tags/%E6%95%B0%E6%8D%AE%E6%B5%81/" rel="self" type="application/rss+xml" /><item>
    <title>1825：求出 MK 平均值（2395 分）</title>
    <link>https://huozhixue.github.io/leetcode/1825/</link>
    <pubDate>Sun, 11 Apr 2021 11:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/1825/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/finding-mk-average/" target="_blank" rel="noopener noreffer">力扣第 236 场周赛第 4 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>给你两个整数 <code>m</code> 和 <code>k</code> ，以及数据流形式的若干整数。你需要实现一个数据结构，计算这个数据流的 <b>MK 平均值</b> 。</p>
<p><strong>MK 平均值</strong> 按照如下步骤计算：</p>]]></description>
</item><item>
    <title>1472：设计浏览器历史记录（1453 分）</title>
    <link>https://huozhixue.github.io/leetcode/1472/</link>
    <pubDate>Sun, 07 Jun 2020 10:50:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/1472/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/design-browser-history/" target="_blank" rel="noopener noreffer">力扣第 192 场周赛第 3 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>你有一个只支持单个标签页的 <strong>浏览器</strong> ，最开始你浏览的网页是 <code>homepage</code> ，你可以访问其他的网站 <code>url</code> ，也可以在浏览历史中后退 <code>steps</code> 步或前进 <code>steps</code> 步。</p>]]></description>
</item><item>
    <title>0933：最近的请求次数（1337 分）</title>
    <link>https://huozhixue.github.io/leetcode/0933/</link>
    <pubDate>Sun, 04 Nov 2018 09:30:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/0933/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/number-of-recent-calls/" target="_blank" rel="noopener noreffer">力扣第 109 场周赛第 1 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>写一个 <code>RecentCounter</code> 类来计算特定时间范围内最近的请求。</p>
<p>请你实现 <code>RecentCounter</code> 类：</p>
<ul>
<li><code>RecentCounter()</code> 初始化计数器，请求数为 0 。</li>
<li><code>int ping(int t)</code> 在时间 <code>t</code> 添加一个新请求，其中 <code>t</code> 表示以毫秒为单位的某个时间，并返回过去 <code>3000</code> 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 <code>[t-3000, t]</code> 内发生的请求数。</li>
</ul>
<p><strong>保证</strong> 每次对 <code>ping</code> 的调用都使用比之前更大的 <code>t</code> 值。</p>]]></description>
</item><item>
    <title>0901：股票价格跨度（1708 分）</title>
    <link>https://huozhixue.github.io/leetcode/0901/</link>
    <pubDate>Sun, 09 Sep 2018 09:40:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/0901/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/online-stock-span/" target="_blank" rel="noopener noreffer">力扣第 101 场周赛第 2 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的 <strong>跨度</strong> 。</p>
<p>当日股票价格的 <strong>跨度</strong> 被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p>]]></description>
</item><item>
    <title>0703：数据流中的第 K 大元素</title>
    <link>https://huozhixue.github.io/leetcode/0703/</link>
    <pubDate>Sat, 03 Dec 2016 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/0703/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/kth-largest-element-in-a-stream/" target="_blank" rel="noopener noreffer">力扣第 703 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>设计一个找到数据流中第 <code>k</code> 大元素的类（class）。注意是排序后的第 <code>k</code> 大元素，不是第 <code>k</code> 个不同的元素。</p>
<p>请实现 <code>KthLargest</code> 类：</p>]]></description>
</item><item>
    <title>0346：数据流中的移动平均值</title>
    <link>https://huozhixue.github.io/leetcode/0346/</link>
    <pubDate>Sat, 12 Dec 2015 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/0346/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/moving-average-from-data-stream/" target="_blank" rel="noopener noreffer">力扣第 346 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>给定一个整数数据流和一个窗口大小，根据该滑动窗口的大小，计算其所有整数的移动平均值。</p>
<p>实现 <code>MovingAverage</code> 类：</p>
<ul>
<li><code>MovingAverage(int size)</code> 用窗口大小 <code>size</code> 初始化对象。</li>
<li><code>double next(int val)</code> 计算并返回数据流中最后 <code>size</code> 个值的移动平均值。</li>
</ul>
<p><strong>示例：</strong></p>]]></description>
</item><item>
    <title>0295：数据流的中位数（★★）</title>
    <link>https://huozhixue.github.io/leetcode/0295/</link>
    <pubDate>Thu, 22 Oct 2015 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/0295/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/find-median-from-data-stream/" target="_blank" rel="noopener noreffer">力扣第 295 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p><strong>中位数</strong>是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。</p>
<ul>
<li>例如 <code>arr = [2,3,4]</code> 的中位数是 <code>3</code> 。</li>
<li>例如 <code>arr = [2,3]</code> 的中位数是 <code>(2 + 3) / 2 = 2.5</code> 。</li>
</ul>
<p>实现 MedianFinder 类:</p>]]></description>
</item><item>
    <title>0170：两数之和 III - 数据结构设计</title>
    <link>https://huozhixue.github.io/leetcode/0170/</link>
    <pubDate>Fri, 19 Jun 2015 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/leetcode/0170/</guid>
    <description><![CDATA[<blockquote>
<p><u><strong><a href="https://leetcode.cn/problems/two-sum-iii-data-structure-design/" target="_blank" rel="noopener noreffer">力扣第 170 题</a></strong></u></p>
</blockquote>
<h2 id="题目">题目</h2>
<p>设计一个接收整数流的数据结构，该数据结构支持检查是否存在两数之和等于特定值。</p>
<p>实现 <code>TwoSum</code> 类：</p>
<ul>
<li><code>TwoSum()</code> 使用空数组初始化 <code>TwoSum</code> 对象</li>
<li><code>void add(int number)</code> 向数据结构添加一个数 <code>number</code></li>
<li><code>boolean find(int value)</code> 寻找数据结构中是否存在一对整数，使得两数之和与给定的值相等。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>
</ul>
<p><strong>示例：</strong></p>]]></description>
</item></channel>
</rss>
