<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>个人博客</title>
        <link>https://huozhixue.github.io/</link>
        <description>Ian 的博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 03 Oct 2024 00:00:00 &#43;0800</lastBuildDate>
            <atom:link href="https://huozhixue.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>算法模板</title>
    <link>https://huozhixue.github.io/template/</link>
    <pubDate>Mon, 01 Jan 2024 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template/</guid>
    <description><![CDATA[1 字符串 字符串匹配：kmp、mancher、z函数、滚动哈希 字典树 后缀数组 AC自动机 2 位运算 位运算 3 链表 链表 4 栈 计算器 5 块 块状数组 6 贪心 贪心]]></description>
</item><item>
    <title>dp模板</title>
    <link>https://huozhixue.github.io/template-dp/</link>
    <pubDate>Thu, 01 Jun 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-dp/</guid>
    <description><![CDATA[数位dp 1 2 3 4 5 6 7 8 9 10 11 @cache def dfs(i,st,bd): if i==len(s): return st res = 0 cur = int(s[i]) up = cur if bd else 9 for x in range(up+1): res += dfs(i+1,st+(x==1),bd and x==cur) return res s = str(n)]]></description>
</item><item>
    <title>图模板：网络流</title>
    <link>https://huozhixue.github.io/template-graph_flow/</link>
    <pubDate>Thu, 04 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_flow/</guid>
    <description><![CDATA[1 最大流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Dinic: def __init__(self,): self.g = defaultdict(list) # g 是图中每个 u 对应的 v 列表 self.h =]]></description>
</item><item>
    <title>图模板：图匹配</title>
    <link>https://huozhixue.github.io/template-graph_match/</link>
    <pubDate>Wed, 03 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_match/</guid>
    <description><![CDATA[二分图 最大匹配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def hgr(g): # g 是二分图中每个 x 对应的 y 列表 def find(x): for y in g[x]: if y not in vis: vis.add(y) if y not in d or find(d[y]): d[y]=x return True return False res,vis,d = 0,set(),{} for x in g:]]></description>
</item><item>
    <title>图模板：拓扑排序</title>
    <link>https://huozhixue.github.io/template-graph_topo/</link>
    <pubDate>Tue, 02 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_topo/</guid>
    <description><![CDATA[博弈反推 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Q = deque(res) # res[u]：终态 u 的胜负结果 while Q: u = Q.popleft() if u==start: # start：初始态 return res[u] for v in nxt[u]: if v in res: continue if v[-1]==res[u]: res[v]]]></description>
</item><item>
    <title>图模板：最短路</title>
    <link>https://huozhixue.github.io/template-graph_shortest/</link>
    <pubDate>Mon, 01 May 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-graph_shortest/</guid>
    <description><![CDATA[1 dijkstra 1 2 3 4 5 6 7 8 9 10 11 12 13 def dij(g,s): pq,d = [(0,s)], [inf]*n d[s] = 0 while pq: w,u = heappop(pq) if w&gt;d[u]: continue for v,w2 in g[u]: nw = w+w2 if nw&lt;d[v]: d[v] = nw heappush(pq, (nw,v)) return d 1 2 3 4 5 6 7 8 9 def dij(g,s): Q, d = set(range(n)), [inf]*n d[s] = 0 while Q: u]]></description>
</item><item>
    <title>树模板：珂朵莉树</title>
    <link>https://huozhixue.github.io/template-tree_odt/</link>
    <pubDate>Thu, 06 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_odt/</guid>
    <description><![CDATA[珂朵莉树 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class ODT: def __init__(self,): from sortedcontainers import SortedList self.sl = SortedList() def update(self,l,r,x): s, e = l, r pos = self.sl.bisect_right((r+2,))-1 while pos&gt;=0 and self.sl[pos][1]&gt;=l-1: a, b, y = self.sl.pop(pos) if y==x: s, e = min(s, a), max(e, b) else: if b&gt;r: self.sl.add((r+1,b,y)) if a&lt;l: self.sl.add((a,l-1,y)) pos]]></description>
</item><item>
    <title>树模板：线段树</title>
    <link>https://huozhixue.github.io/template-tree_seg/</link>
    <pubDate>Wed, 05 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_seg/</guid>
    <description><![CDATA[递归式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 def build(o,l,r): if l==r: t[o] = A[l] return m = (l+r)//2 build(o*2,l,m) build(o*2+1,m+1,r) t[o] = max(t[o*2],t[o*2+1]) def do(o,x): # 收到更新信息 x]]></description>
</item><item>
    <title>树模板：树状数组</title>
    <link>https://huozhixue.github.io/template-tree_bit/</link>
    <pubDate>Tue, 04 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_bit/</guid>
    <description><![CDATA[1 区间和 1 2 3 4 5 6 7 8 9 10 11 12 13 14 def add(i,x): # 更新 nums[i-1] 加上 x while i&lt;ma: t[i] += x i += i&amp;-i def get(i): # nums[:i] 的和 res = 0 while i: res += t[i] i &amp;= i-1 return res ma = len(nums)+1 t = defaultdict(int) 2 区间最大值（只变大]]></description>
</item><item>
    <title>树模板：st表</title>
    <link>https://huozhixue.github.io/template-tree_st/</link>
    <pubDate>Mon, 03 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_st/</guid>
    <description><![CDATA[ST 表（静态区间最值） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class ST: def __init__(self,A,func=max): dp = A[:] self.st = st = [dp] j, N = 1, len(dp) while 2*j&lt;=N: dp = [func(dp[i],dp[i+j]) for i in range(N-2*j+1)] st.append(dp) j &lt;&lt;= 1 self.func = func def query(self,l,r): j = (r-l+1).bit_length()-1 return self.func(self.st[j][l],self.st[j][r-(1&lt;&lt;j)+1])]]></description>
</item><item>
    <title>树模板：最近公共祖先</title>
    <link>https://huozhixue.github.io/template-tree_lca/</link>
    <pubDate>Sun, 02 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_lca/</guid>
    <description><![CDATA[最近公共祖先 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 m = n.bit_length() g = [[] for _ in range(n)] for u,v in edges: g[u].append(v) g[v].append(u) D = [0]*n f = [[-1]*m for _ in range(n)] sk = [(0,-1)] while]]></description>
</item><item>
    <title>树模板：并查集</title>
    <link>https://huozhixue.github.io/template-tree_dsu/</link>
    <pubDate>Sat, 01 Apr 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-tree_dsu/</guid>
    <description><![CDATA[并查集 1 2 3 4 5 6 7 8 9 10 11 12 def find(x): if f[x]!=x: f[x] = find(f[x]) return f[x] def union(x,y): fx, fy = find(x),find(y) if fx != fy: if sz[fx]&gt;sz[fy]: fx, fy = fy, fx f[fx] = fy sz[fy] += sz[fx]]]></description>
</item><item>
    <title>数学模板</title>
    <link>https://huozhixue.github.io/template-math/</link>
    <pubDate>Wed, 01 Mar 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-math/</guid>
    <description><![CDATA[1 质因数分解 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ma = def get_primes(M): f = [1]*M for i in range(2,isqrt(M)+1): if f[i]: f[i*i:M:i] = [0] * ((M-1-i*i)//i+1) return [i for i in range(2,M) if f[i]] primes = get_primes(isqrt(ma)+1) @cache def factor(x): ct = Counter() for p in primes: while x%p==0: x//=p ct[p]]]></description>
</item><item>
    <title>贪心模板</title>
    <link>https://huozhixue.github.io/template-greedy/</link>
    <pubDate>Sun, 05 Feb 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-greedy/</guid>
    <description><![CDATA[下一个排列 1 2 3 4 5 6 7 8 9 10 11 12 13 def nxt(A): n = len(A) i = n-2 while i &gt;= 0 and A[i] &gt;= A[i+1]: i -= 1 if i &lt; 0: return [] j = n-1 while A[j] &lt;= A[i]: j -= 1 A[i], A[j] = A[j], A[i] A[i+1:] = A[i+1:][::-1] return A]]></description>
</item><item>
    <title>块模板</title>
    <link>https://huozhixue.github.io/template-block/</link>
    <pubDate>Sat, 04 Feb 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-block/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>栈模板</title>
    <link>https://huozhixue.github.io/template-stack/</link>
    <pubDate>Fri, 03 Feb 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-stack/</guid>
    <description><![CDATA[计算器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def cal(s: str) -&gt; int: func = {&#39;+&#39;:int.__add__,&#39;-&#39;:int.__sub__,&#39;*&#39;:int.__mul__,&#39;/&#39;:lambda x,y:x//y} pro = dict(zip(&#39;+-*/(&#39;,&#39;11223&#39;)) sk,ops = [],[] for x,op in re.findall(&#39;(\d+)|([-+*/()])&#39;,s+&#39;+&#39;): if x: sk.append(int(x)) elif op==&#39;(&#39;: ops.append(op) elif op==&#39;)&#39;: while ops[-1] != &#39;(&#39;: b,a = sk.pop(),sk.pop() sk.append(func[ops.pop()](a,b)) ops.pop() else: while ops and pro[ops[-1]]&lt;=pro[op]: b,a = sk.pop(),sk.pop() sk.append(func[ops.pop()](a,b)) ops.append(op) return]]></description>
</item><item>
    <title>链表模版</title>
    <link>https://huozhixue.github.io/template-linked/</link>
    <pubDate>Thu, 02 Feb 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-linked/</guid>
    <description><![CDATA[反转链表 1 2 3 4 5 6 7 8 def reverse(head): tail = head while tail and tail.next: tmp = tail.next tail.next = tmp.next tmp.next = head head = tmp return head]]></description>
</item><item>
    <title>位运算模版</title>
    <link>https://huozhixue.github.io/template-bit/</link>
    <pubDate>Wed, 01 Feb 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-bit/</guid>
    <description><![CDATA[遍历子集 1 2 3 4 y = st # 生成 st 的所有子集 while y: # 处理子集 y y = (y-1)&amp;st Gosper&rsquo;s Hack 算法学习笔记(75): Gosper&rsquo;s Hack 1 2 3 4 5 6 7 8 st,ma = (1&lt;&lt;k)-1, 1&lt;&lt;n # 生成 n 元集合所有 k 元子]]></description>
</item><item>
    <title>字符串模板：后缀数组</title>
    <link>https://huozhixue.github.io/template-string_sa/</link>
    <pubDate>Wed, 04 Jan 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-string_sa/</guid>
    <description><![CDATA[后缀数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def SA(A): def SA_IS(A): def equal(pos1,]]></description>
</item><item>
    <title>字符串模板：AC自动机</title>
    <link>https://huozhixue.github.io/template-string_ac/</link>
    <pubDate>Tue, 03 Jan 2023 00:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://huozhixue.github.io/template-string_ac/</guid>
    <description><![CDATA[基于节点类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Node: __slots__ = &#39;son&#39;, &#39;fail&#39;, &#39;last&#39;, &#39;sz&#39; def __init__(self): self.son = {} self.fail = self.last = None self.sz = 0 class AC:]]></description>
</item></channel>
</rss>
